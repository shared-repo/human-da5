[ login 구현]

1. 템플릿 파일 만들기

    templates 폴더 하위에 auth 폴더 만들기

    원본 템플릿에서 login.html, register.html을 위에서 만든  auth 폴더에 복사

    login.html에서 다음 내용 수정

    {% include "page_modules/common_css.html" %}
    -----
 
    -----
    {% include "page_modules/common_js.html" %}

2. Blueprint 만들기

   views 폴더에 auth_view.py 파일 만들기

   login 요청 처리 구현

from flask import Blueprint
from flask import render_template, request

auth_bp = Blueprint("auth", __name__, url_prefix="/auth")

@auth_bp.route("/login/", methods=['GET', 'POST'])
def login():
    if request.method.lower() == 'get':
        return render_template("auth/login.html")
    else:
        pass
    pass

3. __init__.py에 blueprint 등록

   app.register_blueprint(auth_view.auth_bp)


4. 실행 확인

   브라우저에서 http://127.0.0.1:5000/auth/login 주소 요청해서 화면 출력 확인


5. 로그인 처리 (데이터 전송)을 위해 login.html 수정

   <form action="{{ url_for('auth.login') }}" method="post">

   <input class="au-input au-input--full" type="password" name="passwd" placeholder="Password">
   
6. 데이터 수신 및 처리를 위해 auth_view.py 수정

else:
        # 1. 요청 데이터 읽기
        email = request.form.get('email', '11')
        passwd = request.form.get('passwd', '22')
        remember = request.form.get('remember', '33')
        return f'{email}, {passwd}, {remember}'
        # 2. 요청 처리
        # 3. 응답 컨텐츠 만들기

7. 실행 및 확인

   http://127.0.0.1:5000/auth/login 요청으로 화면 표시

   이메일, 패스워드 입력 후 로그인 버튼 클릭


8. 로그인 처리 구현 - 세션에 데이터 저장

   auth_view.py 수정

        # 1. 요청 데이터 읽기
        email = request.form.get('email', '11')
        passwd = request.form.get('passwd', '22')
        remember = request.form.get('remember', '33')
        # return f'{email}, {passwd}, {remember}'
        # 2. 요청 처리
        if email == 'iamuser@example.com' and passwd == '12345': # 로그인 성공
            session['loginuser'] = email # 로그인 처리 : 세션에 로그인 관련 데이터 저장
            return redirect(url_for('main.index')) # main blueprint의 index함수에 연결된 경로로 이동
        else:   # 로그인 실패
            # 3. 응답 컨텐츠 만들기
            return render_template("auth/login.html")

9. 실행 확인

    - 오류 발생 : secret_key 없음 오류

    - __init__.py 파일에 아래 코드 추가

app.config['SECRET_KEY'] = 'humanda5-secret-key' # 세션(session) 등을 사용하기 필요한 설정


10. 실행 확인


11. 로그인 여부 확인 처리 - 화면에 로그인 상태 표시

     templates/base.html의 237라인 부근 수정

<div class="account-dropdown__footer">
                                        {% if session.get('loginuser') %}
                                        <a href="{{ url_for('auth.logout') }}">
                                            <i class="zmdi zmdi-power"></i>Logout</a>
                                        {% else %}
                                        <a href="{{ url_for('auth.login') }}">
                                            <i class="fas fa-sign-in-alt"></i>Login</a>
                                        <a href="#">
                                            <i class="fas fa-user-plus"></i>Register</a>
                                        {% endif %}
                                    </div>

12. 실행 확인


13. 로그아웃 구현

     auth_view.pyt 수정 ( 아래 코드 추가 )

@auth_bp.route('/logout', methods=['GET'])
def logout():
    # del session['loginuser']  # session의 개별 데이터 제거
    # session['loginuser'] = None # session의 개별 데이터 제거
    session.clear() # session의 모든 데이터 제거

    return redirect(url_for('main.index'))










   



